GET _search
{
  "query": {
    "match_all": {}
  }
}

# Create index
PUT /product?pretty

# Add a document to a index
POST product/default
{
  "name": "Processing Events with Logstash",
  "instructor": {
    "firstName": "Amit",
    "lastName": "Thawait"
  }
}

# Add a document to a index with explicit id
POST product/default/1
{
  "name": "Docker",
  "instructor": {
    "firstName": "Amit",
    "lastName": "Thawait"
  }
}

# Get all the records
GET product/_search
{
  "query": {
    "match_all": {}
  }
}

# Override a document in a index
PUT product/default/1
{
  "name": "Docker",
  "instructor": {
    "firstName": "Amit",
    "lastName": "Thawait"
  },
  "price": 100
}

GET product/default/1

# Update a document in a index
POST product/default/1/_update
{
  "doc": {
    "price": 200,
    "tags": ["DevOps"]
  }
}

# Documents in elasticsearch are immutable.
# On update a copy is of old object taken modified and re-indexed.

GET product/default/1

# Update with reference to old value
POST product/default/1/_update
{
  "script": "ctx._source.price += 10"
}

# Create if not exists otherwise update
POST product/default/2/_update
{
  "script": "ctx._source.price += 5",
  "upsert": {
    "price": 100
  }
}

# Delete by query
POST product/default
{
  "name": "The Art of Scalability",
  "category": "book"
}

GET product/default/_search
{
  "query": {
    "match": {
      "category": "book"
    }
  }
}

POST product/_delete_by_query
{
  "query": {
    "match": {
      "category": "book"
    }
  }
}

# Delete index
DELETE /product

# Bulk import
POST product/default/_bulk
{ "index": { "_id": 100 } }
{ "price": 100 }
{ "index": { "_id": 101 } }
{ "price": 110 }

# Bulk import command
# curl -H "Content-Type: application/json" -XPOST /product/default/_bulk?pretty --data-binary @/Users/amo/Downloads/product_data.json

GET /_cat/health?v

GET /_cat/nodes?v

GET /_cat/indices?v

GET /_cat/allocation?v

GET /_cat/shards?v

PUT product/default/_mapping
{
  "properties": {
    "discount": {
      "type": "double"
    }
  }
}

GET product/default/_search?q=*

GET product/default/_search?q=name:ruby

GET product/default/_search
{
  "query": {
    "match_all": {}
  }
}

# Use explain for detailed explanation of the query
GET product/default/_search?explain=true
{
  "query": {
    "term": {
      "name": "lobster"
    }
  }
}

# Term queries are case sensitive where as full-text (match) queries are not.

DELETE /product

# Explain works only for 1 object
GET product/default/1/_explain
{
  "query": {
    "term": {
      "name": "lobster"
    }
  }
}

# Term query for single term
GET product/default/_search
{
  "query": {
    "term": {
      "is_active": true
    }
  }
}
# OR
GET product/default/_search
{
  "query": {
    "term": {
      "is_active": {
        "value": true
      }
    }
  }
}

# term level queries are not analysed
# Ideal for keywords, numbers and date field
# Should not be used for full text search fields
# Accepts both true and "true" (string) as valid values
GET product/default/_search
{
  "query": {
    "term": {
      "is_active": {
        "value": "true"
      }
    }
  }
}

# term level query is case-sensitive

# Term query for multiple terms
GET product/default/_search
{
  "query": {
    "terms": {
      "tags": [
        "soup",
        "cake"
      ]
    }
  }
}
# In the above query tags field is analysed(meaning it is broken up into distinct words when stored, and allows for free-text searches on one or more words in the field) and the search is similar to full text search.

GET product/default/_search
{
  "query": {
    "terms": {
      "tags.keyword": [
        "Cake",
        "Soup"
      ]
    }
  }
}
# Above query uses keyword field and these are not analysed. They search for exact match.
# The .keyword field takes the same input and keeps as one large string, meaning it can be aggregated on, and you can use wildcard searches on it.
# Aggregatable means you can use it in aggregations in elasticsearch, which resembles a sql group by.
# You would probably use the .keyword field with aggregations to count distinct values etc.

# Related read: Text vs. keyword
# https://www.elastic.co/blog/strings-are-dead-long-live-strings

# Retrieving products whose ids are known beforehand
GET product/default/_search
{
  "query": {
    "ids": {
      "values": [1, 2, 3]
    }
  }
}

# Matching document for a field within range of values
GET product/default/_search
{
  "query": {
    "range": {
      "in_stock": {
        "gte": 1,
        "lte": 5
      }
    }
  }
}

GET product/default/_search
{
  "query": {
    "range": {
      "created": {
        "gte": "2010/01/01",
        "lte": "2010/12/31"
      }
    }
  }
}

GET product/default/_search
{
  "query": {
    "range": {
      "created": {
        "gte": "01-01-2010",
        "lte": "31-12-2010",
        "format": "dd-MM-yyyy"
      }
    }
  }
}

GET product/default/_search
{
  "query": {
    "range": {
      "created": {
        "gte": "2010/01/01||-1y-1d"
      }
    }
  }
}

# Rounding of dates
GET product/default/_search
{
  "query": {
    "range": {
      "created": {
        "gte": "2010/01/01||+1y/M"
      }
    }
  }
}

# Matching documents with non-null values
GET product/default/_search
{
  "query": {
    "exists": {
      "field": "tags"
    }
  }
}

# Matching based on prefixes
GET product/default/_search
{
  "query": {
    "prefix": {
      "tags.keyword": "Vege"
    }
  }
}

# Searching with wildcards
# * for multiple characters
GET product/default/_search
{
  "query": {
    "wildcard": {
      "tags.keyword": "Vege*ble"
    }
  }
}

# ? for one character
GET product/default/_search
{
  "query": {
    "wildcard": {
      "tags.keyword": "Vege??ble"
    }
  }
}

# Wildcards queries are extremely slow.
# If * is placed at the start of the term then it is the slowest because it has to iterate over all the terms.
# Write a query matching documents containing one of the terms "Tomato" and "Paste" within the "name" field.
GET /product/default/_search
{
  "query": {
    "terms": {
      "name": [ "tomato", "paste" ]
    }
  }
}

# Please write a query that matches products with a "title" field including “pasta”, “paste”, or similar.
# The query should be dynamic and not use the "terms" query clause.
GET product/default/_search
{
  "query": {
    "wildcard": {
      "name": "past?" 
    }
  }
}

# Please write a query that matches products that contain a number within their "name" field
# Hint: You can use the following regular expression for this: [0-9]+
GET product/default/_search
{
  "query": {
    "regexp": {
      "name": "[0-9]+"
    }
  }
}

# Full text Queries
# =================

GET recipe/default/_mapping

# Match query example
# Google like search query
GET recipe/default/_search
{
  "query": {
    "match": {
      "title": "Receipes with pasta or spaghetti"
    }
  }
}

# Default operator is "or"
# For the above query, all the terms are queried with or operator. It is not that efficient.
# Match queries are analysed.

# Search for only the terms that you want in your search result and add the appropriate operator.
# Order of the words in query doesn't matter here.
GET recipe/default/_search
{
  "query": {
    "match": {
      "title": {
        "query": "pasta spaghetti",
        "operator": "and"
      }
    }
  }
}

# For match queries if you want the order of words to be maintained while searching then use match_phrase.
# match_phrase searches for phrases i.e; sequence of words
GET recipe/default/_search
{
  "query": {
    "match_phrase": {
      "title": "spaghetti puttanesca"
    }
  }
}

# Order of term matters in match_phrase query unlike match query
# This query retuns no result because of the sequence of terms.
GET recipe/default/_search
{
  "query": {
    "match_phrase": {
      "title": "puttanesca spaghetti"
    }
  }
}

# Searching multiple fields for a query string
GET recipe/default/_search
{
  "query": {
    "multi_match": {
      "query": "pasta",
      "fields": ["title", "description"]
    }
  }
}

# Write a query searching for the sentence "pasta with parmesan and spinach" within the "title" field, simulating that this sentence was entered by a user within a search field.
GET recipe/default/_search
{
  "query": {
    "match": {
      "title": "pasta with parmesan and spinach"
    }
  }
}

# Write a query searching for phrase "pasta carbonara" within the "title" field.
GET recipe/default/_search
{
  "query": {
    "match_phrase": {
      "title": "pasta carbonara"
    }
  }
}

GET recipe/default/_search
{
  "query": {
    "match_phrase": {
      "title": "carbonara pasta"
    }
  }
}

# Write a query searching for the terms "pasta" or "pesto" within the "title" and "description" fields.
GET recipe/default/_search
{
  "query": {
    "multi_match": {
      "query": "pasta pesto",
      "fields": ["title", "description"]
    }
  }
}

# Bool queries can be used both at query context and filter context.

# Query for a recipe which must have parmesan and which can be prepared in less than 15 mins.
GET recipe/default/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "ingredients.name": "parmesan"
          }
        },
        {
          "range": {
            "preparation_time_minutes": {
              "lte": 15
            }
          }
        }
      ]
    }
  }
}

# must array(object) also contributes to the relevance score.
# For range objects ES is smart enough to assign a score of 1 since for range objects it is either yes or no,
# Because often the condition inside range filter is something that we either want or don't want and we really don't care how well they have match.
# hence it is better to move the range query into a filter object for performance reasons.
# Further filter queries are good candidate for caching.

# Boolean query with filter object
GET recipe/default/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "ingredients.name": "parmesan"
          }
        }
      ],
      "filter": [
        {
          "range": {
            "preparation_time_minutes": {
              "lte": 15
            }
          }
        }
      ]
    }
  }
}

# Query to exclude tuna from the ingredients
GET recipe/default/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "ingredients.name": "parmesan"
          }
        }
      ],
      "must_not": [
        {
          "match": {
            "ingredients.name": "tuna"
          }
        }
      ],
      "filter": [
        {
          "range": {
            "preparation_time_minutes": {
              "lte": 15
            }
          }
        }
      ]
    }
  }
}
# The query clauses inside must_not object are executed inside filter context same as that of filter object.
# Scoring is therefore ignored and a score of 0 is retured.
# Queries inside must_not are also considered for caching which is handled internally by ES.
# Caching is internally handled by elasticsearch itself.
# In all the above cases it is said that filter and must_not params are considered for caching but there is no guarantee although chances are, they will.

# should query:
# should parameters are used for telling preferences(which need not me mandatory).
# It is not guaranteed that the results that match should param will be ranked higher but if they match they get a boost in the score.

GET recipe/default/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "ingredients.name": "parmesan"
          }
        }
      ],
      "must_not": [
        {
          "match": {
            "ingredients.name": "tuna"
          }
        }
      ],
      "should": [
        {
          "match": {
            "ingredients.name": "parsley"
          }
        }
      ], 
      "filter": [
        {
          "range": {
            "preparation_time_minutes": {
              "lte": 15
            }
          }
        }
      ]
    }
  }
}

# Behaviour of should query depends on bool query as a whole and what else it contains.
# If the bool query is in a query context and contains a must and a filter object then should query do not need to match for document to match the bool query as a whole.
# If this is the case, the only purpose of the should query is to influence the relevance score of matching documents.
# On the other hand, if the bool query is in the filter context or if doesn't have a must or filter object then atleast one of the should queries should match
# In short, in the presence of must query, should query becomes optional and in the absence of must query, should becomes mandatory.

GET recipe/default/_search
{
  "query": {
    "bool": {
      "should": [
        {
          "match": {
            "ingredients.name": "parmesan"
          }
        }
      ]
    }
  }
}

# Debugging bool queries with named queries
# Generally must, must_not and filter queries doesnot require debugging but should query requires it.
GET recipe/default/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "ingredients.name": {
              "query": "parmesan",
              "_name": "parmesan_must"
            }
          }
        }
      ],
      "must_not": [
        {
          "match": {
            "ingredients.name": {
              "query": "tuna",
              "_name": "tune_must_not"
            }
          }
        }
      ],
      "should": [
        {
          "match": {
            "ingredients.name": {
              "query": "parsley",
              "_name": "parsley_should"
            }
          }
        }
      ], 
      "filter": [
        {
          "range": {
            "preparation_time_minutes": {
              "lte": 15,
              "_name": "prep_time_filter"
            }
          }
        }
      ]
    }
  }
}
# After running this query you will see that there is a "matched_queries" array in every matched resultset which basically tells what all queries(query name) 
# were matched for that result.

# How the match query works
# -------------------------
# match query constructs a bool query internally
# match queries are just a convenient wrapper around bool query that simplifies writing common query.

GET recipe/default/_search
{
  "query": {
    "match": {
      "title": "pasta carbonara"
    }
  }
}

# Equivalent bool query of the above query
GET recipe/default/_search
{
  "query": {
    "bool": {
      "should": [
        {
          "term": {
            "title": "pasta"
          }
        },
        {
          "term": {
            "title": "carbonara"
          }
        }
      ]
    }
  }
}
# Everything is same for both the queries : max_source, _score.

# Bool query for match query with "and" operator
GET recipe/default/_search
{
  "query": {
    "match": {
      "title": {
        "query": "pasta carbonara",
        "operator": "and"
      }
    }
  }
}

GET recipe/default/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "term": {
            "title": "pasta"
          }
        },
        {
          "term": {
            "title": "carbonara"
          }
        }
      ]
    }
  }
}

# When you send a match query to ES, it analyses the query and adds a term query clause to a bool query for each term that comes out of the analysis process.
# If the boolean operator is "or" which is the default then the terms are added as term query clauses within the should object, meaning atleast one of them should match.
# If the boolean operator is set to "and" then the term queries are added within the must object, meaning all of them should be present for the given field 
# for a document to match.

# If a match query receives a query consisting of a single term, in that case it doesn't make much sense to use a bool query so instead a single term query
# is used i.e; a term query which is not nested within a bool query and that's how the match query works internally.

# Controlling Query Results :
# ---------------------------
# Getting the result in yaml format
GET recipe/default/_search?format=yaml
{
  "query": {
    "match": {
      "title": "pasta"
    }
  }
}

# Source filtering (_source)
# _source field is used to limit the parameters that we want to fetch in the query.
# Limiting the field reduces the resultset to be transferred over the network thereby improving performance.
# Disable _source field alltogether if you only want ids of the documents.

# Disable _source field
GET recipe/default/_search
{
  "_source": false, 
  "query": {
    "match": {
      "title": "pasta"
    }
  }
}

# Fetching only some fields from _source
GET recipe/default/_search
{
  "_source": ["title", "ingredients.name"], 
  "query": {
    "match": {
      "title": "pasta"
    }
  }
}
# You can also use wildcard matchers for a nested object like ingredients.* to fetch all fields of ingredients.

# To exclude some fields
GET recipe/default/_search
{
  "_source": {
    "excludes": "steps"
  }, 
  "query": {
    "match": {
      "title": "pasta"
    }
  }
}

# To only some fields of an object.
GET recipe/default/_search
{
  "_source": {
    "includes": "ingredients.*",
    "excludes": "ingredients.quantity"
  }, 
  "query": {
    "match": {
      "title": "pasta"
    }
  }
}

# To specify number of records in the query use size query parameter or request body
GET recipe/default/_search?size=2
{
  "_source": false, 
  "query": {
    "match": {
      "title": "pasta"
    }
  }
}
# OR
GET recipe/default/_search
{
  "size": 2, 
  "_source": false, 
  "query": {
    "match": {
      "title": "pasta"
    }
  }
}
# The default no of records is 10.

# You can mention offset in the query as well either as request param or in request body using "from" key.
GET recipe/default/_search
{
  "size": 2,
  "from": 2, 
  "_source": false, 
  "query": {
    "match": {
      "title": "pasta"
    }
  }
}

# Just like SQL limit can be mentioned using "size" key and offset using "from" key. 

# Pagination
# total_pages = ceil(total_hits / page_size)
# Ex: 14 = ceil(137 / 10)
# To calculate offset use the formula :
# from = (page_size * (page_number - 1))

# This process of using size and from is limited to 10000 because requests take up more and more heap memory.
# This also results in slow query there affecting the stability of the cluster. Hence the limit acts as safeguard.
# If you still need to crawl deeper, you can use a parameter named search_after.

# Sorting :
# ---------
# Sorting in elasticsearch is similar to order_by clause in SQL.

# Sort recipes based on preparation_time in ascending order.
GET recipe/default/_search
{
  "_source": false,
  "query": {
    "match_all": {}
  },
  "sort": [
    "preparation_time_minutes"
  ]
}

# Get the latest recipes
GET recipe/default/_search
{
  "_source": "created",
  "query": {
    "match_all": {}
  }
  , "sort": [
    { "created": "desc" }
  ]
}

# Sorting based on two parameters
GET recipe/default/_search
{
  "_source": ["preparation_time_minutes", "created"],
  "query": {
    "match_all": {}
  }
  , "sort": [
    { "preparation_time_minutes": "asc"},
    { "created": "desc" }
  ]
}

# Sorting for fields that contain multiple values.
GET recipe/default/_search
{
  "_source": "ratings",
  "query": {
    "match_all": {}
  },
  "sort": [
    {
      "ratings": {
        "order": "desc"
        , "mode": "avg"
      }
    }
  ]
}

GET recipe/default/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "match": {
            "title": "pasta"
          }
        }
      ],
      "filter": {
        "range": {
          "preparation_time_minutes": {
            "lte": 15
          }
        }
      }
    }
  }
}

#Aggregations:
#-------------
GET order/default/_mapping

DELETE order

PUT order

PUT order/default/_mapping
{
  "properties": {
    "lines": {
      "type": "nested"
    }
  }
}

# Bulk Import
# curl -H "Content-Type: application/json" -XPOST "http://localhost:9200/order/default/_bulk?pretty" --data-binary "@orders-bulk.json"

GET order/default/_search

# Generally to perform aggregation you need all the data, so either you can use match_all query or by leaving out query object itself.

GET order/default/_search
{
  "size": 0,
  "aggs": {
    "total_sales": {
      "sum": {
        "field": "total_amount"
      }
    }
  }
}

GET order/default/_search
{
  "size": 0,
  "aggs": {
    "total_sales": {
      "sum": {
        "field": "total_amount"
      }
    },
    "avg_sales": {
      "avg": {
        "field": "total_amount"
      }
    },
    "min_sale": {
      "min": {
        "field": "total_amount"
      }
    },
    "max_sale": {
      "max": {
        "field": "total_amount"
      }
    }
  }
}

# All distinct salesman
GET order/default/_search
{
  "size": 0,
  "aggs": {
    "total_salesman": {
      "cardinality": {
        "field": "salesman.id"
      }
    }
  }
}

# Cardinality aggregation produces approximate results. To get accurate results refer documentation.

GET order/default/_search
{
  "size": 0,
  "aggs": {
    "values_count": {
      "value_count": {
        "field": "total_amount"
      }
    }
  }
}

GET order/default/_search
{
  "size": 0,
  "aggs": {
    "amount_stats":{
      "stats": {
        "field": "total_amount"
      }
    }
  }
}

# Bucket aggregation
GET order/default/_search
{
  "size": 0,
  "aggs": {
    "status_terms": {
      "terms": {
        "field": "status.keyword"
      }
    }
  }
}

GET order/default/_search
{
  "size": 0,
  "aggs": {
    "status_terms": {
      "terms": {
        "field": "total_amount"
      }
    }
  }
}

# Handling missing/null values for bucket aggregation
GET order/default/_search
{
  "size": 0,
  "aggs": {
    "status_terms": {
      "terms": {
        "field": "status.keyword",
        "missing": "N/A",
        "min_doc_count": 0
      }
    }
  }
}

# Order by
GET order/default/_search
{
  "size": 0,
  "aggs": {
    "status_terms": {
      "terms": {
        "field": "status.keyword",
        "missing": "N/A",
        "min_doc_count": 0,
        "order": {
          "_term": "asc"
        }
      }
    }
  }
}

# Nested aggregation inside a bucket aggregation
GET order/default/_search
{
  "size": 0,
  "aggs": {
    "status_terms": {
      "terms": {
        "field": "status.keyword"
      },
      "aggs": {
        "status_agg": {
          "stats": {
            "field": "total_amount"
          }
        }
      }
    }
  }
}

# Filtering out documents in a bucket aggregation
GET order/default/_search
{
  "size": 0,
  "aggs": {
    "low_value_docs": {
      "filter": {
        "range": {
          "total_amount": {
            "lt": 50
          }
        }
      },
      "aggs": {
        "avg_amount": {
          "avg": {
            "field": "total_amount"
          }
        }
      }
    }
  }
}

# Bucket rules with filters
GET recipe/default/_search
{
  "size": 0,
  "aggs": {
    "my_filter": {
      "filters": {
        "filters": {
          "pasta": {
            "match": {
              "title": "pasta"
            }
          },
          "spaghetti": {
            "match": {
              "title": "spaghetti"
            }
          }
        }
      },
      "aggs": {
        "avg_rating": {
          "avg": {
            "field": "ratings"
          }
        }
      }
    }
  }
}

# The filters is the aggregation type while the second one is the query parameter.

# Range Aggregations
GET order/default/_search
{
  "size": 0,
  "aggs": {
    "amount_distribution": {
      "range": {
        "field": "total_amount",
        "ranges": [
          {
            "to": 50
          },
          {
            "from": 50,
            "to": 100
          },
          {
            "from": 100
          }
        ]
      }
    }
  }
}

# Date range aggregation
GET order/default/_search
{
  "size": 0,
  "aggs": {
    "purchased_range": {
      "date_range": {
        "field": "purchased_at",
        "ranges": [
          {
            "from": "2016-01-01",
            "to": "2016-01-01||+6M"
          },
          {
            "from": "2016-01-01||+6M",
            "to": "2016-01-01||+1y"
          }
        ]
      }
    }
  }
}

GET order/default/_search
{
  "size": 0,
  "aggs": {
    "purchased_range": {
      "date_range": {
        "field": "purchased_at",
        "format": "yyyy-MM-dd",
        "keyed": true,
        "ranges": [
          {
            "from": "2016-01-01",
            "to": "2016-01-01||+6M",
            "key": "first_half"
          },
          {
            "from": "2016-01-01||+6M",
            "to": "2016-01-01||+1y",
            "key": "second_half"
          }
        ]
      },
      "aggs": {
        "bucket_stats": {
          "stats": {
            "field": "total_amount"
          }
        }
      }
    }
  }
}

# Histograms : For dynamic bucketing
GET order/default/_search
{
  "size": 0,
  "aggs": {
    "amount_distribution": {
      "histogram": {
        "field": "total_amount",
        "interval": 25
      }
    }
  }
}

# Histogram bucket with query
GET order/default/_search
{
  "size": 0,
  "query": {
    "range": {
      "total_amount": {
        "gte": 100
      }
    }
  },
  "aggs": {
    "amount_distribution": {
      "histogram": {
        "field": "total_amount",
        "interval": 25,
        "min_doc_count": 1
      }
    }
  }
}

# Extended bounds
GET order/default/_search
{
  "size": 0,
  "query": {
    "range": {
      "total_amount": {
        "gte": 100
      }
    }
  },
  "aggs": {
    "amount_distribution": {
      "histogram": {
        "field": "total_amount",
        "interval": 25,
        "extended_bounds": {
          "min": 0,
          "max": 500
        }
      }
    }
  }
}

# Date Histogram
GET order/default/_search
{
  "size": 0,
  "aggs": {
    "orders_over_time": {
      "date_histogram": {
        "field": "purchased_at",
        "interval": "month"
      }
    }
  }
}

# Global Aggregation
# Global Aggregation is not influenced by the search query. Implicitly, its a match_all query. 
GET order/default/_search
{
  "size": 0,
  "query": {
    "range": {
      "total_amount": {
        "gte": 100
      }
    }
  },
  "aggs": {
    "all_order_stats": {
      "global": {},
      "aggs": {
        "stats_amount": {
          "stats": {
            "field": "total_amount"
          }
        }
      }
    }
  }
}

GET order/default/_search
{
  "size": 0,
  "query": {
    "range": {
      "total_amount": {
        "gte": 100
      }
    }
  },
  "aggs": {
    "expensive_order_stats":{
      "stats": {
        "field": "total_amount"
      }
    },
    "all_order_stats": {
      "global": {},
      "aggs": {
        "stats_amount": {
          "stats": {
            "field": "total_amount"
          }
        }
      }
    }
  }
}

# Aggregation on missing values
POST order/default/1001
{
  "total_amount": 100
}

POST order/default/1002
{
  "total_amount": 200,
  "status": null
}

GET order/default/_search
{
  "size": 0,
  "aggs": {
    "orders_without_status": {
      "missing": {
        "field": "status.keyword"
      },
      "aggs": {
        "sum_of_orders_without_status": {
          "sum": {
            "field": "total_amount"
          }
        }
      }
    }
  }
}

DELETE order/default/1001

DELETE order/default/1002

# =================================

GET order/default/_search

GET recipe/default/14

GET recipe/default/14/_termvectors
{
  "fields": ["description"],
  "per_field_analyzer" : {
    "description.keyword": ""
  }
}

GET recipe/default/_termvectors
{
  "fields": ["steps"]
}

GET recipe/default/_search

GET recipe/default/_search
{
  "query": {
    "match": {
      "steps": "pasta"
    }
  },
  "highlight" : {
    "fields": {
      "steps": {
         "fragment_size" : 100
      }
    }
  }
}

# Get ids of all the docs
GET order/default/_search
{
  "size": 100,
  "query": {
    "match_all": { }
  },
  "_source": "{id}"
}

GET /_mtermvectors
{
   "docs": [
      {
         "_index": "recipe",
         "_type": "default",
         "_id": "19",
         "term_statistics": true
      },
      {
         "_index": "recipe",
         "_type": "default",
         "_id": "19",
         "fields": [
            "steps"
         ]
      }
   ]
}

GET recipe/default/_mtermvectors
{
    "ids" : ["14", "19"],
    "parameters": {
        "fields": [
            "steps"
        ],
        "term_statistics": true
    }
}
