Basic docker commands :
-----------------------
docker

docker -v

docker info

docker images

docker ps
== docker container ls

docker ps -a
== docker container ls -a

docker create -i -t --name=alpine_test alpine sh
Creates a container

docker run -i -t ubuntu:xenial /bin/bash
Creates and start a container

docker inspect ubuntu:xenial

docker restart compassionate_bhabha

docker attach compassionate_bhabha

docker rename compassionate_bhabha my_new_container_name
docker rename <container_id/container_name> <new_container_name>

docker run -i -t -d ubuntu:xenial /bin/bash
docker run -itd ubuntu:xenial /bin/bash

--rm flag : If you want to delete the container after exiting
docker run -it --rm --name=test_ubuntu ubuntu:xenial /bin/bash

docker inspect <container_name>
docker inspect compassionate_bhabha
docker inspect compassionate_bhabha | grep IP

docker stop <container_name>
docker stop compassionate_bhabha

docker pause <container_name>
docker unpause <container_name>

For exiting without stopping the container type: ctrl+p+q

----------------------------------------------------------------------------------
Inside docker container if "apt-get update" is not working then follow these steps
nm-tool | grep DNS
OR
nmcli dev show | grep IP4.DNS
OR
nmcli dev list | grep IP4.DNS

create file /etc/docker/daemon.json
{
    "dns": ["172.31.70.12", "172.31.70.13"]
}

The CentOS equivalent is the /etc/sysconfig/docker
-----------------------------------------------------------------------------------

docker run -it --name=alpine_test -w=/var  alpine sh
-w option can be used to set working directory

Environment variables can be added to the container using --env or -r option
docker run -it --env="WEB_HOST=172.168.1.1" apline sh

docker search <image_name>
docker search training/sinatra

docker commit -m "commit message" -a "<User name>" <docker-container-name> <new_image_name>
docker commit -m "Installed SSH and created test user" -a "Amit Thawait" flamboyant_edison amitthawait/ubuntu-sshd:v1

mkdir build
cd build

mkdir apline_date_test1 && cd apline_date_test1
vim Dockerfile
--------------
FROM apline
RUN date > /data
--------------

docker build -t="amitthawait/apline_date_test1:v1" .

docker run -it amitthawait/apline_date_test1:v1 cat /data

docker build -t="amitthawait/apline_date_test1:v2" .
#Uses cache
docker run -it amitthawait/apline_date_test1:v2 cat /data

docker build -t="amitthawait/apline_date_test1:v3" --no-cache .
docker run -it amitthawait/apline_date_test1:v3 cat /data

mkdir apline_date_test2 && cd apline_date_test2
date > datefile

vim Dockerfile
--------------
FROM apline
RUN date > /data
COPY datefile /datefile
--------------

With COPY instruction, we can copy the content from our build context to the intermediate container which would get committed to create the resulting image.
COPY <src> <dest>
COPY ["<src>", "<dest>"] # This form is used when source/destination contains a white space.

docker build -t="amitthawait/apline_date_test2:v1" .

docker run -it amitthawait/apline_date_test2:v1 cat /datefile

ADD command is similar to COPY but with more capability:
1) It can take source(file/picture) as URL
2) If the source is a tar file then it would untar it at the destination


Instruction format:
1) Shell form
   <instruction> <command>
   CMD echo "This is shell form"
2) Exec form
   <instruction> ["executable", "param1", "param2", ...]
   CMD ["/bin/echo", "This is exec form"]

Shell form instruction CMD echo "This is shell form" is equivalent to
/bin/sh -c echo "This is shell form"
The default shell on Linux is /bin/sh
We can change the default shell with SHELL instruction in Dockerfile

Exec form is preffered form.

Instruction can be classified into 2 groups
1) Build time instructions
   FROM, MAINTAINER, RUN, ADD, COPY, USER, EXPOSE, WORKDIR ..etc
2) Run time instructions
   CMD, ENTRYPOINT

CMD:
This is a runtime instruction means that it would be executed when the container is started from the resulting image.
There can be only 1 CMD instruction in a Dockerfile.
If you specify more than 1 CMD instruction then only the last one would be taken into consideration.

If you want to run your <command> without a shell then you must express the command as a JSON array and give the full path to the executable.
This array form is the preferred format of CMD

CMD ["nginx", "-g", "daemon off;"]
means that when the container would start from nginx image, it would by default run "nginx -g daemon off;" command to start the nginx daemon.
We can overwrite the defaults defined by CMD by starting the /bin/sh program instead of nginx daemon at the start time.
docker run -it nginx /bin/sh

CMD vs ENTRYPOINT :
-------------------
mkdir cmd_ex && cd cmd_ex
vim Dockerfile
--------------
FROM alpine
CMD ["/bin/echo", "This is printed using CMD instruction"]
--------------
docker build -t alpine_cmd:v1 .
docker run alpine_cmd:v1
# Ouputs: This is printed using CMD instruction

docker run alpine_cmd:v1 ls
# Here the command "ls" overrides the default instruction specified using CMD

mkdir extrypoint_ex && cd entrypoint_ex
vim Dockerfile
--------------
FROM alpine
ENTRYPOINT ["/bin/echo", "This is printed using ENTRYPOINT instruction"]
--------------
docker build -t alpine_ep:v1 .
docker run apline_ep:v1
# Outputs: This is printed using ENTRYPOINT instruction

docker run apline_ep:v1 ls
# Outputs: This is printed using ENTRYPOINT instruction ls

The difference bewteen CMD and ENTRYPOINT is that the default command is not changed and anything passed while instanting the image with ENTRYPOINT command is taken as argument.

Both CMD and ENTRYPOINT can be used together as well, ENTRYPOINT command will be the default command to be executed and whatever is passed via CMD will be passed to CMD as an argument. If something else is passed from command line then it overrides whatever is written in CMD
vim Dockerfile
--------------
FROM alpine
ENTRYPOINT ["/bin/echo", "We are learning about"]
CMD ["Dockerfile"]
--------------
docker build -t cmd_vs_entrypoint:v1 .
docker run cmd_vs_entrypoint:v1
# Prints We are learning about Dockerfile

docker run cmd_vs_entrypoint:v1 ls
# Prints We are learning about ls

Dangling images : Image with either REPOSITORY or TAG as <none>
docker images --filter=dangling=true

Dangling images are created due to using same image name in the build command.
To get only image_id
docker images --quiet --filter=dangling=true

To remove the dangling images
docker images -q --filter=dangling=true | xargs docker rmi

WORKDIR : The WORKDIR instruction sets the working directory for any RUN, CMD, ENTRYPOINT, COPY and ADD instructions that follow it in the Dockerfile.
If the WORKDIR doesn't exist, it will be created even if it's not used in any subsequent Dockerfile instruction.

WORKDIR /a
WORKDIR b
WORKDIR c
RUN pwd
Output would be /a/b/c

vim Dockerfile
--------------
FROM alpine
RUN mkdir scripts
COPY scripts/sample.sh scripts
WORKDIR scripts
CMD ./sample.sh
--------------

ENV :
With ENV instruction we set environment variables which would be available inside the container for future reference.
ENV <key> <value>
ENV <key>=<value> <key>=<value>

vim Dockerfile
-----------
# This is a custom ubuntu image with SSH installed
FROM ubuntu:latest
MAINTAINER Amit Thawait <amit17thawait@gmail.com>
RUN apt-get update
RUN apt-get install -y telnet openssh-server
-----------

With RUN command inside a Dockerfile, whatever command is passed to it, its result becomes part of the base image.
For ex: For the above docker file, telnet and openssh-server become part of the base image after an image is built from it.

docker build -t="new_image_name" <location of docker_file>
docker build -t="amitthawait/ubuntu-sshdonly:v2" .
OR
docker build -t="amitthawait/ubuntu-sshdonly:v2" < /location/Dockerfile
OR
docker build -t "amitthawait/ubuntu-sshdonly:v2" .

The advantage of using a Dockerfile is that it creates an instance of docker container using the base image and then deletes it upon exiting whereas in the case of
commiting a changes to docker container it doesn't removes the instance there by taking up disk space.

docker logs <container_name>
docker logs naughty_brown

# To create a process inside an already running container use docker exec
docker exec <container_name> <command>
docker exec naughty_brown /bin/cat /etc/profile

For docker exec command : the container in which exec command is fired should be running

docker run ubuntu:xenial echo "Hello from this container"
The above command just runs the echo command and exits. Even if you restart the above container it will just run the echo command again and will exit.

If you want to just create a container and not run it
docker create -it --name="my_container" ubuntu:latest /bin/bash
you can start it using
docker start my_container

docker pull nginx:latest

docker run -d -p 80 nginx:latest

docker run -d -p 8080:80 nginx:latest
This command binds host port 8080 to container port 80

0.0.0.0 means all interfaces including host IP, localhost etc.

You can also pass specfic host IP as well like 127.0.0.1
docker run -d -p 127.0.0.1:8081:80 nginx:latest

You can also bind only tcp or udp port
docker run -d -p 127.0.0.1:8081:80/udp nginx:latest

docker run -itd docker.io/centos:6 /bin/bash
Pull a docker image and running it in daemon mode in 1 go

docker rm <container_name>
docker rm jolly_pare

Naming a container
docker run -it --name=test_ssh -p 8022:22 docker.io/centos:6 /bin/bash

docker rmi <image_id>
docker rmi 0ef2e08ed3fa

With rmi you can also delete a docker image by name
docker rmi <image_name>
docker rmi centos/java_8:v1

docker exec -u 0 -it <container_name> /bin/bash
-u 0 signifies user with id 0 which is actually root user
docker exec -u 0 -it condescending_albattani /bin/bash

Difference between CMD and RUN
RUN command is executed while building the base image,
whereas CMD command is added as configuration for the base image and is executed when the image is instantiated.
Command stated using CMD directive will not be executed if the container is asked to do something else like connecting to /bin/bash while instanting.

ENTRYPOINT command is similar to CMD command except it will always be executed the container is instantiated.
ALso, if something else is asked to run while instanting lets say /bin/bash, then it will be simply ignored and the command mentioned in ENTRYPOINT will be run.

A command can be run on a container having ENTRYPOINT using "docker exec" command
docker exec apacheweb1 /bin/cat /var/www/html/index.html

-P(High port mapping scheme): expose and remap automatically any ports that are exposed within the container. Port need to exposed from container using EXPOSE command.
docker run -d --name apacheweb3 -P centos7/apache:v2

While starting the container, we can set its restart policy
man docker run
docker run -d --restart=always --name=web1 nginx
docker run -d --restart=on-failure:3 --name=web2 nginx

Docker copy command
echo "We are learning docker" > index.html
cat index.html
docker start web2
docker inspect web2 | grep IPA
curl http://172.17.0.2
docker cp index.html web2:/usr/share/nginx/html
elinks http://172.17.0.2

Labelling a container
docker run -it --name=alpine_test --label=app  alpine sh
docker ps
docker ps --filter label=app

To mount a volume in the container
docker run -it --name voltest1 -v /mydata centos:latest /bin/bash
The above /mydata can be found out at _data dir inside volumes in /var/lib/docker/volumes/<hash>/_data which can seen using docker inspect <container_name> command.

docker run -it --name voltest2 -v /home/user/builds/my_host_data_dir:/mydata centos:latest /bin/bash
This command mount a local file system outside docker file system to /mydata dir.

docker network ls

docker network ls --no-trunc

docker network inspect bridge

All the docker commands are also available as man pages. Just add hyphen for multi word command. For ex: man page for docker run command
man docker-run
man docker run
man docker-network-create

Create a network
docker network create --subnet 10.1.0.0/24 --gateway 10.1.0.1 mybridge01

docker network inspect mybridge01

docker network rm mybridge01

Assigning a IP range to containers
docker network create --subnet 10.1.0.0/16 --gateway 10.1.0.1 --ip-range=10.1.4.0/24 --driver=bridge --label=host4network bridge04
docker network ls
ifconfig
docker network inspect bridge04

docker run -it --name nettest1 --net bridge04 centos:latest /bin/bash
yum update
yum install -y nettools
ifconfig

Assigning a IP to a container
docker run -it --name nettest2 --net bridge04 --ip 10.1.4.100 centos:latest /bin/bash

docker top <container_name>
docker top apacheweb1

docker stats <container_name>
This commands shows the live stats related to CPU, memory etc means realtime view of the resources the container is using.

List only container ids
docker ps -a -q

docker ps -a -q | wc -l

To remove all stopped containers
docker container prune

docker events
Attaches to docker daemon and waits for any event to happen and the lists it

See man docker-events

docker events --filter event=attach

docker events --filter event=attach --filter event=die --filter event=stop

For local backup & restoring of base images :
Saving a base image
docker save centos:latest > centos.latest.tar
OR
docker save --output centos.latest.tar centos:latest

To check the content of tar file
tar tvf centos.latest.tar

To further compress the tar file
gzip centos.latest.tar

To load the container from compressed file
docker load < centos.latest.tar
OR
docker load --input centos.latest.tar
docker load --input centos.latest.tar.gz

History of image
docker history centos7:apache/v2
# for detailed output
docker history --no-trunc centos7:apache/v2

Tagging a image
docker tag <image_name> <new_image_name>
docker tag <image_id> <new_image_name>

docker tag centos:latest centos/7:v1

Pushing a image to docker hub
First create a repository in hub.docker.com, then create a tag with same name in localhost then push it after login.
docker tag centos7/apache:v2 amitthawait/mycentosv3
docker login
docker push amit17thawait/mycentosv3
docker logout

Creating a bridge adapter :
ifconfig
sudo ip link add br10 type bridge
sudo ip addr add 10.10.100.1/24 dev br10
sudo ip link set br10 up
ifconfig

You can also choose 172.something 192.something 10.something 148.something because these network are private IP ranges.

docker cp <source-file-path> <destination-file-location>
To copy file from container to localhost and vice-versa.
docker cp <container_id>:<path-of-file> <destination-in-localhost>
docker cp test.txt <container_id>:/tmp/
---------------

https://diveintodocker.com/blog/5-steps-to-take-before-moving-your-applications-into-docker

http://www.johnzaccone.io/entrypoint-vs-cmd-back-to-basics/

https://github.com/moby/moby/issues/28892

https://github.com/moby/moby/pull/29001

https://blog.codeship.com/reduce-docker-image-size/

https://sysdig.com/blog/sysdig-docker-usage-report-2017/
---------------
docker volume ls

docker volume create my_data

docker compose

docker run --name wordpress_db -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=wordpress -e MYSQL_USER=wordpress -e MYSQL_PASSWORD=wordpress -p 3307:3306 -d mysql

docker run -d --name local_wordpress -p 9000:80  -e WORDPRESS_DB_HOST=172.17.0.2:3306 -e WORDPRESS_DB_USER=wordpress -e WORDPRESS_DB_PASSWORD=wordpress wordpress

docker run -d --name local_wordpress --link wordpress_db:db -p 9000:80 -e WORDPRESS_DB_HOST=db:3306 -e WORDPRESS_DB_USER=wordpress -e WORDPRESS_DB_PASSWORD=wordpress wordpress

---------------------------------
version : '2'
services: 
  db: 
    environment: 
      MYSQL_DATABASE: wordpress
      MYSQL_PASSWORD: wordpress
      MYSQL_ROOT_PASSWORD: somewordpress
      MYSQL_USER: wordpress
    image: "mysql:latest"
    ports:
      - 3307:3306
    restart: always
    volumes: 
      - db_data:/var/lib/mysql

  wordpress: 
    depends_on: 
      - db
    environment: 
      WORDPRESS_DB_HOST: "db:3306"
      WORDPRESS_DB_PASSWORD: wordpress
      WORDPRESS_DB_USER: wordpress
    image: "wordpress:latest"
    ports: 
      - "9000:80"
    restart: always
volumes: 
  db_data:
   driver: local
---------------------------------
docker-compose up
check
- docker inspect
- docker network ls
- docker volume ls

➜  docker-training-containerization > docker-compose down
Stopping dockertrainingcontainerization_wordpress_1 ... done
Stopping dockertrainingcontainerization_db_1 ... done
Removing dockertrainingcontainerization_wordpress_1 ... done
Removing dockertrainingcontainerization_db_1 ... done
Removing network dockertrainingcontainerization_default

docker-compose build
# Builds the image

======================
Rkt (Rock-it)

Installation:
gpg --recv-key 18AD5014C99EF7E3BA5F6CE950BDD3E0FC8A365E
wget https://github.com/rkt/rkt/releases/download/v1.26.0/rkt_1.26.0-1_amd64.deb
wget https://github.com/rkt/rkt/releases/download/v1.26.0/rkt_1.26.0-1_amd64.deb.asc
gpg --verify rkt_1.26.0-1_amd64.deb.asc
sudo dpkg -i rkt_1.26.0-1_amd64.deb

To fetch an image
rkt fetch <image_url>
rkt fetch coreos.com/etcd:v2.0.0

rkt image list

rkt fetch --insecure-options=image docker://busybox

rkt image list

To remove an image
rkt image rm <image-name>

To list running pods
rkt list

rkt run --insecure-options=image docker://nginx
