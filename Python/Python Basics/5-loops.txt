1) while loop :-
================

1) while loop :-
Syntax :
while expression:
   statement(s)

Ex:
count = 0
while (count < 3):
   print('The count is:', count)
   count = count + 1
=>
The count is: 0
The count is: 1
The count is: 2

2) The Infinite Loop:
A loop becomes infinite loop if a condition never becomes false. You must use caution when using while loops because of the possibility that this condition never resolves to a false value. This results in a loop that never ends. Such a loop is called an infinite loop.

An infinite loop might be useful in client/server programming where the server needs to run continuously so that client programs can communicate with it as and when required.

#!/usr/bin/python

var = 1
while var == 1 :  # This constructs an infinite loop
   num = raw_input("Enter a number  :")
   print "You entered: ", num

print "Good bye!"

3) The else Statement Used with Loops :-
Python supports to have an else statement associated with a loop statement.

If the else statement is used with a for loop, the else statement is executed when the loop has exhausted iterating the list.

If the else statement is used with a while loop, the else statement is executed when the condition becomes false.

The following example illustrates the combination of an else statement with a while statement that prints a number as long as it is less than 5, otherwise else statement gets executed.

Ex:
count = 0
while count < 3:
   print count, " is  less than 3"
   count = count + 1
else:
   print count, " is not less than 3"
=>
0 is less than 5
1 is less than 5
2 is less than 5
3 is not less than 3

4) Single Statement Suites:
Similar to the if statement syntax, if your while clause consists only of a single statement, it may be placed on the same line as the while header.

Here is the syntax and example of a one-line while clause:

#!/usr/bin/python

flag = 1
while (flag): print 'Given flag is really true!'

Its better not try above example because it will go into infinite loop and you will have to use CTRL+C keys to come out.


2) for loop :-
==============

1) The for loop in Python has the ability to iterate over the items of any sequence, such as a list or a string.
Syntax:
for iterating_var in sequence:
   statements(s)
Ex:
#!/usr/bin/python

for letter in 'Python':     # First Example
   print('Current Letter :', letter)

fruits = ['banana', 'apple',  'mango']
for fruit in fruits:        # Second Example
   print('Current fruit :', fruit)

When the above code is executed, it produces the following result:

Current Letter : P
Current Letter : y
Current Letter : t
Current Letter : h
Current Letter : o
Current Letter : n
Current fruit : banana
Current fruit : apple
Current fruit : mango

2) Iterating by Sequence Index:
An alternative way of iterating through each item is by index offset into the sequence itself. Following is a simple example:

#!/usr/bin/python
fruits = ['banana', 'apple',  'mango']
for index in range(len(fruits)):
   print('Current fruit :', fruits[index])

When the above code is executed, it produces the following result:

Current fruit : banana
Current fruit : apple
Current fruit : mango


3) Nested Loops :-
==================

1) Python programming language allows to use one loop inside another loop.
Syntax:
The syntax for a nested for loop statement in Python is as follows:

for iterating_var in sequence:
   for iterating_var in sequence:
      statements(s)
   statements(s)
The syntax for a nested while loop statement in Python programming language is as follows:

while expression:
   while expression:
      statement(s)
   statement(s)

A final note on loop nesting is that you can put any type of loop inside of any other type of loop. For example a for loop can be inside a while loop or vice versa.

Ex:
i = 2
while(i < 20):
   j = 2
   while(j <= (i/j)):
      if not(i%j): break
      j = j + 1
   else : print(i, " is prime")
   i = i + 1
=>
2  is prime
3  is prime
5  is prime
7  is prime
11  is prime
13  is prime
17  is prime
19  is prime

4) Loop Control Statements:
===========================

1) break statement :-
The break statement in Python terminates the current loop and resumes execution at the next statement, just like the traditional break found in C.

The most common use for break is when some external condition is triggered requiring a hasty exit from a loop. The break statement can be used in both while and for loops.

If you are using nested loops (i.e., one loop inside another loop), the break statement will stop the execution of the innermost loop and start executing the next line of code after the block.
Ex:
var = 10                    # Second Example
while var > 0:              
   print('Current variable value :', var)
   var = var -1
   if var == 5:
      break
=>
Current variable value : 10
Current variable value : 9
Current variable value : 8
Current variable value : 7
Current variable value : 6

2) continue statement :-
The continue statement in Python returns the control to the beginning of the while loop. The continue statement rejects all the remaining statements in the current iteration of the loop and moves the control back to the top of the loop.
The continue statement can be used in both while and for loops.
Ex:
for letter in 'Python':     # First Example
   if letter == 'h':
      continue
   print('Current Letter :', letter)

var = 5                    # Second Example
while var > 0:
   var = var -1
   if var == 2:
      continue
   print('Current variable value :', var)
=>
Current Letter : P
Current Letter : y
Current Letter : t
Current Letter : o
Current Letter : n
Current variable value : 4
Current variable value : 3
Current variable value : 1
Current variable value : 0

3) pass statement :-
The pass statement in Python is used when a statement is required syntactically but you do not want any command or code to execute.
The pass statement is a null operation; nothing happens when it executes. The pass is also useful in places where your code will eventually go, but has not been written yet (e.g., in stubs for example):

for letter in 'Python':
   if letter == 'h':
      pass
      print 'This is pass block'
   print 'Current Letter :', letter
=>
Current Letter : P
Current Letter : y
Current Letter : t
This is pass block
Current Letter : h
Current Letter : o
Current Letter : n
