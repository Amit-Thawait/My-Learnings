Introduction :-
---------------
First of all, Erlang is a functional programming language. If you have ever worked with imperative languages, statements such as i++ may be normal to you; 
in functional programming they are not allowed. In fact, changing the value of any variable is strictly forbidden! This may sound weird at first, but if you 
remember your math classes, it's in fact how you've learned it.

y = 2
x = y + 3
x = 2 + 3
x = 5

Had I added the following:

x = 5 + 1
x = x
∴ 5 = 6

Functions always returning the same result for the same parameter is called referential transparency. It's what lets us replace add_two_to(3) with 5, as the result 
of 3+2 will always be 5.

x = today() = 2009/10/22
-- wait a day --
x = today() = 2009/10/23
x = x
∴ 2009/10/22 = 2009/10/23
Oh no! My beautiful equations! They suddenly all turned wrong! How come my function returns a different result every day?

Obviously, there are some cases where it's useful to break referential transparency. Erlang has this very pragmatic approach with functional programming: obey its
purest principles (referential transparency, avoiding mutable data, etc), but break away from them when real world problems pop up.

Erlang's actor model can be imagined as a world where everyone is sitting alone in their own room and can perform a few distinct tasks. Everyone communicates strictly
by writing letters and that's it. While it sounds like a boring life (and a new age for the postal service), it means you can ask many people to perform very specific
tasks for you, and none of them will ever do something wrong or make mistakes which will have repercussions on the work of others; they may not even know the existence
of people other than you (and that's great).

To escape this analogy, Erlang forces you to write actors (processes) that will share no information with other bits of code unless they pass messages to each other.
Every communication is explicit, traceable and safe.

When we defined Erlang, we did so at a language level, but in a broader sense, this is not all there is to it: Erlang is also a development environment as a whole. The
code is compiled to bytecode and runs inside a virtual machine. So Erlang, much like Java and kids with ADD, can run anywhere. The standard distribution includes (among
others) development tools (compiler, debugger, profiler, test framework), the Open Telecom Platform (OTP) Framework, a web server, a parser generator, and the mnesia
database, a key-value storage system able to replicate itself on many servers, supporting nested transactions and letting you store any kind of Erlang data.

The VM and the libraries also allow you to update the code of a running system without interrupting any program, distribute your code with ease on many computers and
manage errors and faults in a simple but powerful manner.

The first case of this is related to Erlang's massive scaling abilities due to its lightweight processes. It is true that Erlang processes are very light: you can have
hundreds of thousands of them existing at the same time, but this doesn't mean you have to use it that way just because you can. For example, creating a shooter game
where everything including bullets is its own actor is madness. The only thing you'll shoot with a game like this is your own foot. There is still a small cost in
sending a message from actor to actor, and if you divide tasks too much, you will make things slower!

Erlang is also said to be able to scale in a directly proportional manner to how many cores your computer has, but this is usually not true: Bad Graph: Speed vs Cores:
It just scales! it is possible, but most problems do not behave in a way that lets you just run everything at the same time.

There's something else to keep in mind: while Erlang does some things very well, it's technically still possible to get the same results from other languages. The
opposite is also true; evaluate each problem as it needs to be, and choose the right tool according to the problem being addressed. Erlang is no silver bullet and will
be particularly BAD at things like IMAGE and SIGNAL PROCESSING, OPERATING SYSTEM DEVICE DRIVERS, etc. and will shine at things like large software for server use (i.e.:
queues, map-reduce), doing some lifting coupled with other languages, higher-level protocol implementation, etc. Areas in the middle will depend on you. You should not
necessarily wall yourself in server software with Erlang: there have been cases of people doing unexpected and surprising things. One example is IANO, a robot created
by the UNICT team, which uses Erlang for its artificial intelligence and won the silver medal at the 2009 eurobot competition. Another example is Wings 3D, an open
source 3D modeler (but not a renderer) written in Erlang and thus cross-platform.

Installation :-
---------------
Install dependencies
--------------------
1) Install OpenSSL
   sudo apt-get install openssl

2) Install Oracle Java SE JDK
   sudo apt-add-repository ppa:webupd8team/java
   sudo apt-get update
   sudo apt-get install oracle-java8-installer

3) Install wxWidgets - Toolkit for GUI applications. Required for building the wx application. At least version 3.0 of wxWidgets is required
   i) Download the source
      http://sourceforge.net/projects/wxwindows/files/3.0.2/wxWidgets-3.0.2.tar.bz2/download

   ii) Extract and move the source
       tar -xf wxWidgets-3.0.2.tar.bz2
       sudo mv wxWidgets-3.0.2 /opt/

   iii) To compile wxwidgets we would need some utility programs including the C++ compiler on Linux called g++. And all of it would be installed from the
        repositories using apt-get.
        sudo apt-get install libgtk-3-dev build-essential checkinstall

   iv) Compile wxWidgets: Get inside the directory where wxWidgets is extracted. In order to keep things clean, create a directory where the compilation would be done
       mkdir gtk-build
       cd gtk-build/
       Now run the configure and make commands one by one. Each one would take some time to finish. make command will take long time.
       ../configure --disable-shared --enable-unicode
       > make

   v) Install with checkinstall (It will ask couple of questions, just press enter for both)
      sudo checkinstall

We also need the GTK development libraries which wxWidgets depend on

For Building Documentation :
4) Install xsltproc - A command line XSLT processor
   sudo apt-get install xsltproc

5) Install fop - Apache FOP print formatter (requires Java)
   sudo apt-get install fop

Unpacking
---------
1) Download the source from http://www.erlang.org/download.html by selecting appropriate release from Available releases section on the right side.

2) Extract the tar file downloaded
   tar -xf otp_src_18.1.tar.gz

3) Move the extracted folder to /opt/
   sudo mv otp_src_18.1 /opt/

4) Go to the new otp directory
   cd /opt/otp_src_18.1

5) Set the $ERL_TOP variable to the above directory
   export ERL_TOP=`pwd`

Configuring
-----------
6) Run the following commands to configure the build
   ./configure

Building
--------
7) Build the Erlang/OTP release.
   > make

Installing
----------
8) You are now ready to install the Erlang/OTP release! The following command will install the release on your system.
   make install

Erlang Shell :-
---------------
> erl
Erlang R16B03 (erts-5.10.4) [source] [64-bit] [smp:4:4] [async-threads:10] [kernel-poll:false]

Eshell V5.10.4  (abort with ^G)
1>

To quit the shell type
> q().
don't forget the dot at the end
